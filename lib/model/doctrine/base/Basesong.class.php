<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('song', 'SngCMS');

/**
 * Basesong
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property varchar $original_file_path
 * @property varchar $updated_file_path
 * @property nvarchar $file_name
 * @property tinyint $file_type_id
 * @property varchar $quality
 * @property smallint $year
 * @property varchar $song_name
 * @property varchar $artist_name
 * @property nvarchar $album
 * @property nvarchar $writer
 * @property nvarchar $composer
 * @property nvarchar $record_company
 * @property varchar $youtube_link_auto
 * @property varchar $youtube_link_manual
 * @property varchar $artist_picture
 * @property smallint $genre_id
 * @property varchar $country
 * @property integer $master_id
 * @property varchar $copyright_id
 * 
 * @method integer  getId()                  Returns the current record's "id" value
 * @method varchar  getOriginalFilePath()    Returns the current record's "original_file_path" value
 * @method varchar  getUpdatedFilePath()     Returns the current record's "updated_file_path" value
 * @method nvarchar getFileName()            Returns the current record's "file_name" value
 * @method tinyint  getFileTypeId()          Returns the current record's "file_type_id" value
 * @method varchar  getQuality()             Returns the current record's "quality" value
 * @method smallint getYear()                Returns the current record's "year" value
 * @method varchar  getSongName()            Returns the current record's "song_name" value
 * @method varchar  getArtistName()          Returns the current record's "artist_name" value
 * @method nvarchar getAlbum()               Returns the current record's "album" value
 * @method nvarchar getWriter()              Returns the current record's "writer" value
 * @method nvarchar getComposer()            Returns the current record's "composer" value
 * @method nvarchar getRecordCompany()       Returns the current record's "record_company" value
 * @method varchar  getYoutubeLinkAuto()     Returns the current record's "youtube_link_auto" value
 * @method varchar  getYoutubeLinkManual()   Returns the current record's "youtube_link_manual" value
 * @method varchar  getArtistPicture()       Returns the current record's "artist_picture" value
 * @method smallint getGenreId()             Returns the current record's "genre_id" value
 * @method varchar  getCountry()             Returns the current record's "country" value
 * @method integer  getMasterId()            Returns the current record's "master_id" value
 * @method varchar  getCopyrightId()         Returns the current record's "copyright_id" value
 * @method song     setId()                  Sets the current record's "id" value
 * @method song     setOriginalFilePath()    Sets the current record's "original_file_path" value
 * @method song     setUpdatedFilePath()     Sets the current record's "updated_file_path" value
 * @method song     setFileName()            Sets the current record's "file_name" value
 * @method song     setFileTypeId()          Sets the current record's "file_type_id" value
 * @method song     setQuality()             Sets the current record's "quality" value
 * @method song     setYear()                Sets the current record's "year" value
 * @method song     setSongName()            Sets the current record's "song_name" value
 * @method song     setArtistName()          Sets the current record's "artist_name" value
 * @method song     setAlbum()               Sets the current record's "album" value
 * @method song     setWriter()              Sets the current record's "writer" value
 * @method song     setComposer()            Sets the current record's "composer" value
 * @method song     setRecordCompany()       Sets the current record's "record_company" value
 * @method song     setYoutubeLinkAuto()     Sets the current record's "youtube_link_auto" value
 * @method song     setYoutubeLinkManual()   Sets the current record's "youtube_link_manual" value
 * @method song     setArtistPicture()       Sets the current record's "artist_picture" value
 * @method song     setGenreId()             Sets the current record's "genre_id" value
 * @method song     setCountry()             Sets the current record's "country" value
 * @method song     setMasterId()            Sets the current record's "master_id" value
 * @method song     setCopyrightId()         Sets the current record's "copyright_id" value
 * 
 * @package    RSSMonitor
 * @subpackage model
 * @author     Anvaya Technologies
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Basesong extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('song');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             'autoincrement' => true,
             'primary' => true,
             ));
        $this->hasColumn('original_file_path', 'varchar', 500, array(
             'type' => 'varchar',
             'size' => 500,
             'notnull' => false,
             'length' => 500,
             ));
        $this->hasColumn('updated_file_path', 'varchar', 500, array(
             'type' => 'varchar',
             'size' => 500,
             'notnull' => false,
             'length' => 500,
             ));
        $this->hasColumn('file_name', 'nvarchar', 200, array(
             'type' => 'nvarchar',
             'size' => 200,
             'notnull' => false,
             'length' => 200,
             ));
        $this->hasColumn('file_type_id', 'tinyint', null, array(
             'type' => 'tinyint',
             'unsigned' => true,
             'notnull' => false,
             ));
        $this->hasColumn('quality', 'varchar', 50, array(
             'type' => 'varchar',
             'size' => 50,
             'notnull' => false,
             'length' => 50,
             ));
        $this->hasColumn('year', 'smallint', null, array(
             'type' => 'smallint',
             'unsigned' => true,
             'notnull' => false,
             ));
        $this->hasColumn('song_name', 'varchar', 100, array(
             'type' => 'varchar',
             'size' => 100,
             'notnull' => false,
             'length' => 100,
             ));
        $this->hasColumn('artist_name', 'varchar', 100, array(
             'type' => 'varchar',
             'size' => 100,
             'notnull' => false,
             'length' => 100,
             ));
        $this->hasColumn('album', 'nvarchar', 300, array(
             'type' => 'nvarchar',
             'size' => 300,
             'notnull' => false,
             'length' => 300,
             ));
        $this->hasColumn('writer', 'nvarchar', 300, array(
             'type' => 'nvarchar',
             'size' => 300,
             'notnull' => false,
             'length' => 300,
             ));
        $this->hasColumn('composer', 'nvarchar', 300, array(
             'type' => 'nvarchar',
             'size' => 300,
             'notnull' => false,
             'length' => 300,
             ));
        $this->hasColumn('record_company', 'nvarchar', 300, array(
             'type' => 'nvarchar',
             'size' => 300,
             'notnull' => false,
             'length' => 300,
             ));
        $this->hasColumn('youtube_link_auto', 'varchar', 255, array(
             'type' => 'varchar',
             'size' => 255,
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('youtube_link_manual', 'varchar', 255, array(
             'type' => 'varchar',
             'size' => 255,
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('artist_picture', 'varchar', 50, array(
             'type' => 'varchar',
             'size' => 50,
             'notnull' => false,
             'length' => 50,
             ));
        $this->hasColumn('genre_id', 'smallint', null, array(
             'type' => 'smallint',
             'unsigned' => true,
             'notnull' => false,
             ));
        $this->hasColumn('country', 'varchar', 6, array(
             'type' => 'varchar',
             'notnull' => false,
             'length' => 6,
             ));
        $this->hasColumn('master_id', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => false,
             ));
        $this->hasColumn('copyright_id', 'varchar', 255, array(
             'type' => 'varchar',
             'size' => 255,
             'notnull' => false,
             'length' => 255,
             ));

        $this->option('symfony', array(
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}