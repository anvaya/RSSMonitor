CREATE TABLE rss_playlist_data (id INT NOT NULL identity, scan_source_id INT NULL, song_name nvarchar(1000) NULL, artist_name nvarchar(1000) NULL, album nvarchar(300) NULL, country nvarchar(100) NULL, genre nvarchar(300) NULL, picture_file VARCHAR(300) NULL, youtube_link VARCHAR(1000) NULL, record_company nvarchar(300) NULL, copyright nvarchar(500) NULL, release_date nvarchar(100) NULL, processed BIT NULL, created_at CHAR(19) NULL, PRIMARY KEY([id]));
CREATE TABLE rss_scan_data (id INT NOT NULL identity, scan_source_id INT NULL, song_name nvarchar(1000) NULL, artist_name nvarchar(1000) NULL, album nvarchar(300) NULL, country nvarchar(100) NULL, genre nvarchar(300) NULL, picture_file VARCHAR(300) NULL, youtube_link VARCHAR(1000) NULL, record_company nvarchar(300) NULL, copyright nvarchar(500) NULL, release_date nvarchar(100) NULL, processed BIT NULL, created_at CHAR(19) NULL, PRIMARY KEY([id]));
CREATE TABLE rss_scan_song (id INT NOT NULL identity, rss_data_id INT NULL, playlist_data_id INT NULL, song_name nvarchar(1000) NULL, artist_name nvarchar(1000) NULL, album nvarchar(300) NULL, country nvarchar(100) NULL, genre nvarchar(300) NULL, picture_file VARCHAR(300) NULL, youtube_link VARCHAR(1000) NULL, record_company nvarchar(300) NULL, copyright nvarchar(500) NULL, release_date nvarchar(100) NULL, audio_file_url nvarchar(1000) NULL, audio_file VARCHAR(200) NULL, alredy_exists BIT NULL, added_to_system BIT NULL, system_added_date CHAR(19) NULL, track_id INT NULL, created_at CHAR(19) NOT NULL, updated_at CHAR(19) NOT NULL, PRIMARY KEY([id]));
CREATE TABLE rss_scan_source (id INT NOT NULL identity, source_name nvarchar(100) NOT NULL UNIQUE, source_type_id INT NULL, url nvarchar(1000) NULL, disabled BIT NOT NULL, PRIMARY KEY([id]));
CREATE TABLE rss_setting (setting_key VARCHAR(50) NOT NULL, value1 VARCHAR(200) NULL, value2 VARCHAR(200) NULL, value3 VARCHAR(200) NULL, PRIMARY KEY([setting_key]));
CREATE TABLE rss_sf_guard_forgot_password (id INT NOT NULL identity, user_id INT NOT NULL, unique_key VARCHAR(255) NULL, expires_at CHAR(19) NOT NULL, created_at CHAR(19) NOT NULL, updated_at CHAR(19) NOT NULL, PRIMARY KEY([id]));
CREATE TABLE rss_sf_guard_group (id INT NOT NULL identity, name VARCHAR(255) NULL UNIQUE, description VARCHAR(1000) NULL, created_at CHAR(19) NOT NULL, updated_at CHAR(19) NOT NULL, PRIMARY KEY([id]));
CREATE TABLE rss_sf_guard_group_permission (group_id INT NOT NULL, permission_id INT NOT NULL, created_at CHAR(19) NOT NULL, updated_at CHAR(19) NOT NULL, PRIMARY KEY([group_id], [permission_id]));
CREATE TABLE rss_sf_guard_permission (id INT NOT NULL identity, name VARCHAR(255) NULL UNIQUE, description VARCHAR(1000) NULL, created_at CHAR(19) NOT NULL, updated_at CHAR(19) NOT NULL, PRIMARY KEY([id]));
CREATE TABLE rss_sf_guard_remember_key (id INT NOT NULL identity, user_id INT NULL, remember_key VARCHAR(32) NULL, ip_address VARCHAR(50) NULL, created_at CHAR(19) NOT NULL, updated_at CHAR(19) NOT NULL, PRIMARY KEY([id]));
CREATE TABLE rss_sf_guard_user (id INT NOT NULL identity, first_name VARCHAR(255) NULL, last_name VARCHAR(255) NULL, email_address VARCHAR(255) NOT NULL UNIQUE, username VARCHAR(128) NOT NULL UNIQUE, algorithm VARCHAR(128) DEFAULT 'sha1' NOT NULL, salt VARCHAR(128) NULL, password VARCHAR(128) NULL, is_active BIT DEFAULT '1' NULL, is_super_admin BIT DEFAULT '0' NULL, last_login CHAR(19) NULL, created_at CHAR(19) NOT NULL, updated_at CHAR(19) NOT NULL, PRIMARY KEY([id]));
CREATE TABLE rss_sf_guard_user_group (user_id INT NOT NULL, group_id INT NOT NULL, created_at CHAR(19) NOT NULL, updated_at CHAR(19) NOT NULL, PRIMARY KEY([user_id], [group_id]));
CREATE TABLE rss_sf_guard_user_permission (user_id INT NOT NULL, permission_id INT NOT NULL, created_at CHAR(19) NOT NULL, updated_at CHAR(19) NOT NULL, PRIMARY KEY([user_id], [permission_id]));
CREATE TABLE rss_source_type (id INT NOT NULL identity, type_name nvarchar(100) NOT NULL UNIQUE, processor_class VARCHAR(60) NULL, disabled BIT NOT NULL, PRIMARY KEY([id]));
CREATE INDEX [is_active_idx] ON [rss_sf_guard_user] ([is_active]);
ALTER TABLE [rss_playlist_data] ADD CONSTRAINT [rss_playlist_data_scan_source_id_rss_scan_source_id] FOREIGN KEY ([scan_source_id]) REFERENCES [rss_scan_source]([id]) ON UPDATE CASCADE ON DELETE SET NULL;
ALTER TABLE [rss_scan_data] ADD CONSTRAINT [rss_scan_data_scan_source_id_rss_scan_source_id] FOREIGN KEY ([scan_source_id]) REFERENCES [rss_scan_source]([id]) ON UPDATE CASCADE ON DELETE SET NULL;
ALTER TABLE [rss_scan_song] ADD CONSTRAINT [rss_scan_song_playlist_data_id_rss_playlist_data_id] FOREIGN KEY ([playlist_data_id]) REFERENCES [rss_playlist_data]([id]) ON UPDATE CASCADE ON DELETE SET NULL;
ALTER TABLE [rss_sf_guard_forgot_password] ADD CONSTRAINT [rss_sf_guard_forgot_password_user_id_rss_sf_guard_user_id] FOREIGN KEY ([user_id]) REFERENCES [rss_sf_guard_user]([id]) ON DELETE CASCADE;
ALTER TABLE [rss_sf_guard_group_permission] ADD CONSTRAINT [rss_sf_guard_group_permission_group_id_rss_sf_guard_group_id] FOREIGN KEY ([group_id]) REFERENCES [rss_sf_guard_group]([id]) ON DELETE CASCADE;
ALTER TABLE [rss_sf_guard_group_permission] ADD CONSTRAINT [rpri] FOREIGN KEY ([permission_id]) REFERENCES [rss_sf_guard_permission]([id]) ON DELETE CASCADE;
ALTER TABLE [rss_sf_guard_remember_key] ADD CONSTRAINT [rss_sf_guard_remember_key_user_id_rss_sf_guard_user_id] FOREIGN KEY ([user_id]) REFERENCES [rss_sf_guard_user]([id]) ON DELETE CASCADE;
ALTER TABLE [rss_sf_guard_user_group] ADD CONSTRAINT [rss_sf_guard_user_group_user_id_rss_sf_guard_user_id] FOREIGN KEY ([user_id]) REFERENCES [rss_sf_guard_user]([id]) ON DELETE CASCADE;
ALTER TABLE [rss_sf_guard_user_group] ADD CONSTRAINT [rss_sf_guard_user_group_group_id_rss_sf_guard_group_id] FOREIGN KEY ([group_id]) REFERENCES [rss_sf_guard_group]([id]) ON DELETE CASCADE;
ALTER TABLE [rss_sf_guard_user_permission] ADD CONSTRAINT [rss_sf_guard_user_permission_user_id_rss_sf_guard_user_id] FOREIGN KEY ([user_id]) REFERENCES [rss_sf_guard_user]([id]) ON DELETE CASCADE;
ALTER TABLE [rss_sf_guard_user_permission] ADD CONSTRAINT [rpri_1] FOREIGN KEY ([permission_id]) REFERENCES [rss_sf_guard_permission]([id]) ON DELETE CASCADE;

